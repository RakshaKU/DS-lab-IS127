#include<stdio.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
struct node *head;
void beginsert();
void lastinsert();
void randominsert();
void begin_delete();
void last_delete();
void random_delete();
void display();
void search();
void main()
{
 int choice;
 while(1)
 {
 printf("\nOperations are:\n");
 printf("1.Insert at beginning\n2.Insert at last\n3.Insert at any random location\n4.Delete from beginning\n5.Delete from last\n6.Delete node after specified location\n7.Search for anelement\n8.Display\n9.exit\n");
 printf("Enter your choice:\n");
 scanf("%d",&choice);
 switch(choice)
 {
 case 1:
 beginsert();
 break;
 case 2:
 lastinsert();
 break;
 case 3:
 randominsert();
 break;
 case 4:
 begin_delete();
 break;
 case 5:
 last_delete();
 break;
 case 6:
 random_delete();
 break;
 case 7:
 search();
 break;
 case 8:
 display();
 break;
 case 9:
 exit(0) ;
 break;
 default:
 printf("Invalid operation");
 }
}
}
void beginsert()
{
struct node *ptr;
int item;
ptr=(struct node *)malloc(sizeof(struct node *));
if(ptr==NULL)
{
 printf("OVERFLOW\n");
}
else
{
 printf("Enter value\n");
 scanf("%d",&item);
 ptr->data=item;
 ptr->next=head;
 head=ptr;
 printf("\nNode inserted");
}
}
void lastinsert()
{
struct node *ptr,*temp;
int item;
ptr=(struct node *)malloc(sizeof(struct node *));
 if(ptr==NULL)
{
 printf("OVERFLOW\n");
}
else
{
 printf("Enter value\n");
 scanf("%d",&item);
 ptr->data=item;
 if(head==NULL)
 {
 ptr->next=NULL;
 head=ptr;
 printf("\nNode inserted");
 }
 else
 {
 temp=head;
 while(temp->next!=NULL)
 {
 temp=temp->next;
 }
 temp->next=ptr;
 ptr->next=NULL;
 printf("\n Node inserted");
 }
}
}
void randominsert()
{
int i,loc,item;
struct node *ptr,*temp;
ptr=(struct node *)malloc(sizeof(struct node *));
 if(ptr==NULL)
{
 printf("OVERFLOW\n");
}
else
{
 printf("Enter value\n");
 scanf("%d",&item);
 ptr->data=item;
 printf("Enter the location after which you want to insert");
 scanf("\n%d",&loc);
 temp=head;
 for(i=0;i<loc;i++)
 {
 temp=temp->next;
 if(temp==NULL)
 {
 printf("\nCan't insert\n");
 return;
 }
 }
 ptr->next=temp->next;
 temp->next=ptr;
 printf("\nNode inserted");
}
}
void begin_delete()
{
struct node *ptr;
if(head==NULL)
{
 printf("List is empty\n");
}
else
{
 ptr=head;
 head=ptr->next;
 free(ptr);
 printf("\nNode deleted from the beginning");
 }
}
void last_delete()
{
struct node *ptr,*ptr1;
if(head==NULL)
{
 printf("List is empty\n");
}
else if(head->next==NULL)
{
 head=NULL;
 free(head);
 printf("\nOnly node of the list deleted");
 }
else
{
ptr=head;
while(ptr->next!=NULL)
{
 ptr1=ptr;
 ptr=ptr->next;
}
ptr1->next=NULL;
free(ptr);
printf("\nDeleted node from the last\n");
}
}
void random_delete()
{
struct node *ptr,*ptr1;
int loc,i;
printf("\nEnter the location of the node after which you want to perform deletion\n");
scanf("%d",&loc);
ptr=head;
for(i=0;i<loc;i++)
 {
 ptr1=ptr;
 ptr=ptr->next;
 if(ptr==NULL)
 {
 printf("\nCan't delete");
 return;
 }
 }
ptr1->next=ptr->next;
free(ptr);
printf("\nDeleted node%d",loc+1);
}
void search()
{
struct node *ptr;
int item,i=0,flag;
ptr=head;
if(ptr==NULL)
{
 printf("\nList is empty\n");
}
else
{
 printf("\n enter the item which you want to search\n");
 scanf("%d",&item);
 while(ptr!=NULL)
 {
 if(ptr->data==item)
 {
 printf("item found at location %d",i+1);
 flag=0;
 }
 else
 {
 flag=1;
 }
 i++;
 ptr=ptr->next;
 }
 if(flag==1)
 {
 printf("item not found\n");
 }
}
}
void display()
{
struct node *ptr;
ptr=head;
if(ptr==NULL)
{
 printf("\nList is empty\n");
}
else
{
 printf("Printing values\n");
 while(ptr!=NULL)
 {
 printf("\n%d",ptr->data);
 ptr=ptr->next;
 }
}
}
