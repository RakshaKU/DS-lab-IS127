/Design and implement a stack(Linked Link implementation)and demonstrate its working with the necessary inputs.Display the appropriate message in case of exception/ 
#include<stdio.h>
#include<stdlib.h>
void push();//to insert an element into stack//
void pop();//to remove an element from the stack//
void display();//to display the elements of the stack//
struct node
{
 int val;
 struct node *next;
};
struct node *head;
void push()//user defined function//
{
 int val;
 struct node *ptr=(struct node *)malloc(sizeof(struct node));
 if(ptr==NULL)
 {
   printf("Not able to push the element");
 }
 else
 {
   printf("Enter the value\n");
   scanf("%d",&val);
   if(head==NULL)
    {
     ptr->val=val;
     ptr->next=NULL;
     head=ptr;
    }
  else
  {
   ptr->val=val;
   ptr->next=head;
   head=ptr;
  }
 printf("Item pushed\n");
 }
}

void pop()//user defined function//
{
 int item;
 struct node *ptr;
 if(head==NULL)
 {
 printf("Underflow\n");//stack is empty//
 }
 else
 {
  item=head->val;
  ptr=head;
  head=head->next;
  free(ptr);
  printf("Item popped %d\n",item);
 }
}
void display()//user defined function//
{
 int i;
 struct node *ptr;
 ptr=head;
 if(ptr==NULL)
 {
  printf("Stack is empty\n");//underflow condition//
 }
 else
 {
  printf("printing stack elements\n");
  while(ptr!=NULL)
   {
    printf("%d\t",ptr->val);
    printf("\n");
    ptr=ptr->next;
   }
  }
}

int main()
{
 int choice;
 while(1)
 {
  printf("Select the operation\n");
  printf("1.push\n2.pop\n3.display\n4.exit\n");
  scanf("%d",&choice);
  switch(choice)//switch case to choose between the operations//
  {
   case 1:push();
        break;
   case 2:pop();
        break;
   case 3:display();
        break;
   case 4:exit(0);
   default:printf("Invalid choice\n");    
  }
 }
}    

OUTPUT:

Select the operation
1.push
2.pop
3.display
4.exit
1
Enter the value
4
Item pushed
Select the operation
1.push
2.pop
3.display
4.exit
1
Enter the value
5
Item pushed
Select the operation
1.push
2.pop
3.display
4.exit
3
printing stack elements
5    
4    
Select the operation
1.push
2.pop
3.display
4.exit
2
Item popped 5
Select the operation
1.push
2.pop
3.display
4.exit
2
Item popped 4
Select the operation
1.push
2.pop
3.display
4.exit
3
Stack is empty
Select the operation
1.push
2.pop
3.display
4.exit
4
