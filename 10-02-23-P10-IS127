IMPLEMENTATION OF DOUBLY LINKED LIST
#include<stdio.h>
#include<stdlib.h>
struct node
{
 struct node *prev;
 struct node*next;
 int data;
 };
struct node *head;
void insertion_beginning();//to insert node at front 
void insertion_last();//to insert node at end 
void insertion_specified();//to insert node at specific position 
void delete_beginning();//to delete node at front
void delete_last();//to delete node at end
void delete_specified();//to delete node at specific position
void display();//to display the elements 
void search ();//to search an element
void main()
{
  int choice;
  while(1)
  {
  printf("Operations are:");
  printf("1.Insert at beginning\n2.Insert at last\n3.Insert at any random location\n4.Delete from beginning\n5.Delete from last\n6.Delete node after specified location\n7.Search for an element\n8.Display\n9.exit\n");
  printf("Enter your choice:\n");
  scanf("%d",&choice);
  switch(choice)// to choose between the operations
  {
   case 1:
        insertion_beginning();//calling the function
        break;
   case 2:
        insertion_last();//calling the function
        break;
   case 3:
       insertion_specified();//calling the function
        break;            
   case 4:
        delete_beginning();//calling the function
        break;
   case 5:
        delete_last();//calling the function
        break;            
   case 6:
       delete_specified();//calling the function
        break;  
   case 7:
         search();//calling the function
        break;    
   case 8:
        display();//calling the function
        break;    
   case 9:
      exit(0) ;
        break;
   default:
        printf("Invalid operation");
   }
 }
}   
void insertion_beginning()//defining the function
{
 struct node *ptr;
 int item;
 ptr=(struct node*)malloc(sizeof(struct node*));
 if(ptr==NULL)
 {
  printf("OVERFLOW\n");
 }
 else
 {
  printf("Enter value\n");
  scanf("%d",&item);
  if(head==NULL)
  {
  ptr->next=NULL;
  ptr->prev=NULL;
  ptr->data=item;
  head=ptr;
  }
  else
  {
   ptr->data=item;
   ptr->prev=NULL;
   ptr->next=head;
   head->prev=ptr;
   head=ptr;
   }
   printf("Node inserted\n");
 }
}
void insertion_last()//defining the function
{
 struct node *ptr,*temp;
 int item;
 ptr=(struct node*)malloc(sizeof(struct node*));
 if(ptr==NULL)
 {
  printf("OVERFLOW\n");
 }
 else
 {
  printf("Enter value\n");
  scanf("%d",&item);
  ptr->data=item;
  if(head==NULL)
  {
  ptr->next=NULL;
  ptr->prev=NULL;
  head=ptr;
  }
  else
  {
   temp=head;
   while(temp->next!=NULL)
   {
temp=temp->next;
   }
temp->next=ptr;
ptr->prev=temp;
   ptr->next=NULL;
  }
 }
   printf("\n Node inserted");
}
void insertion_specified()//defining the function
{
 struct node *ptr,*temp;
 int item,loc,i;
 ptr=(struct node*)malloc(sizeof(struct node*));
 if(ptr==NULL)
 {
  printf("OVERFLOW\n");
 }
 else
 {
  temp=head;
  printf("Enter location\n");
  scanf("%d",&loc);
  for(i=0;i<loc;i++)
  {
   temp=temp->next;
   if(temp==NULL)
   {
printf("There are less than %d elements",loc);
return;
   }
  }
 printf("Enter value\n");
 scanf("%d",&item);
  ptr->data=item;
   ptr->next=temp->next;
   ptr->prev=temp;
   temp->next=ptr;
   temp->next->prev=ptr;
   printf("node inserted\n");
  }
 }
 void delete_beginning()//defining the function
{
 struct node *ptr;
 if(head==NULL)
 {
  printf("List is empty\n");
 }
 else if(head->next==NULL)
 {
  head=NULL;
  free(head);
  printf("\n node deleted");
  }
 else
 {
 ptr=head;
head=head->next;
head->prev=NULL;
 free(ptr);
 printf("\nNode deleted\n");
 }
}
  void delete_last()//defining the function
{
 struct node *ptr;
 if(head==NULL)
 {
  printf("List is empty\n");
 }
 else if(head->next==NULL)
 {
  head=NULL;
  free(head);
  printf("\n node deleted");
  }
 else
 {
 ptr=head;
 if(ptr->next!=NULL)
 {
  ptr=ptr->next;
  }
  ptr->prev->next=NULL;
 free(ptr);
 printf("\nNode deleted\n");
 }
}
void delete_specified()//defining the function
{
 struct node *ptr,*temp;
 int val,loc;
 printf("\nEnter the data after which you want to perform deletion\n");
 scanf("%d",&val);
 ptr=head;
 while(ptr->data!=val)
  ptr=ptr->next;
 if(ptr->next==NULL)
   {
printf("\nCan't delete");
   }
   else if( ptr->next->next==NULL)
   {
ptr->next=NULL;
  }
  else
  {
   temp= ptr->next;
 ptr->next=temp->next;
 temp->next->prev=ptr;
 free(ptr);
 printf("\nDeleted node%d",loc+1);
 }
}
void display()//defining the function
{
struct node *ptr;
printf("\nPrinting values\n");
ptr=head;
while(ptr!=NULL)
{
printf("%d\n",ptr->data);
ptr=ptr->next;
}
}
void search()//defining the function
{
 struct node *ptr;
 int item,i=0,flag;
 ptr=head;
 if(ptr==NULL)
 {
  printf("Empty list\n");
 }
 else
 {
  printf("\n Enter the item which u want to search\n");
  while(ptr!=NULL)
  {
   if(ptr->data==item)
   {
printf("\nitem found at location %d",i+1);
flag=0;
break;
   }
   else
   {
flag=1;
   }
   i++;
   ptr=ptr->next;
  }
  if(flag==1)
  {
   printf("\nItem not founf\n");
  }
 }
}
